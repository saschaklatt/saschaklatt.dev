---
import type {CollectionEntry} from "astro:content";
import {Picture} from "astro:assets";

import IconArrowDown from "@/assets/images/icons/arrow-down.svg";
import {getBreakpoints} from "@/utils";
import {numToPx} from "@/utils";

interface Props {
    id?: string;
    project: CollectionEntry<"projects">;
}

interface ListItem {
    label: string;
    text: string;
    href?: string;
}

const {project} = Astro.props;
const breakpoints = getBreakpoints();

const listItems: ListItem[] = [];

function formatDate(date: Date): string {
    const months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
    const m = date.getMonth();
    const y = date.getFullYear();
    return `${months[m]} ${y}`;
}

if (project.data.website) {
    listItems.push({
        label: "Website",
        text: project.data.website.label,
        href: project.data.website.href,
    });
}
if (project.data.dateEnd) {
    const from = formatDate(project.data.dateStart);
    const to = formatDate(project.data.dateEnd);
    listItems.push({
        label: "When",
        text: from === to ? `in ${from}` : `${from} - ${to}`,
    });
} else {
    listItems.push({
        label: "From / to",
        text: `since ${formatDate(project.data.dateStart)}`,
    });
}
if (project.data.technologies.length > 0) {
    listItems.push({
        label: "Tech-stack",
        text: project.data.technologies.join(", "),
    });
}
if (project.data.tools && project.data.tools.length > 0) {
    listItems.push({
        label: "Tools",
        text: project.data.tools.join(", "),
    });
}
if (project.data.employer) {
    listItems.push({
        label: "Employer",
        text: project.data.employer,
    });
}
if (project.data.client) {
    listItems.push({
        label: "Client",
        text: project.data.client,
    });
}
if (project.data.partners && project.data.partners.length > 0) {
    listItems.push({
        label: "in cooperation with",
        text: project.data.partners.join("\n"),
    });
}
if (project.data.industry) {
    listItems.push({
        label: "Industry",
        text: project.data.industry,
    });
}
if (project.data.teamSize) {
    listItems.push({
        label: "Team size",
        text: project.data.teamSize === 1 ? "Solo" : `${project.data.teamSize} team members`,
    });
}
---

<card-project data-project-title={project.data.title} id={project.id}>
    <details
        class:list={[
            "group",
            "rounded-lg no-tap-highlight transition-spacing",
            "open:text-neutral-950 open:bg-linear-to-tr from-neutral-600 to-secondary-600 md:open:p-8",
        ]}
    >
        <summary
            class:list={[
                "group/summary",
                "rounded-lg overflow-hidden",
                "transition-all",
                "details-summary rounded-lg grid grid-cols-[1fr_min-content]",
                "md:grid-cols-[auto_1fr_auto] md:grid-rows-[auto_auto] md:gap-x-4 lg:gap-x-8",
                "md:hover:bg-neutral-800 md:hover:scale-[1.02] md:hover:border-transparent md:hover:shadow-2xl",
                "md:hover:group-open:scale-100 md:group-open:hover:bg-neutral-800/10 md:hover:group-open:shadow-none",
                "md:focus-visible:bg-neutral-800/10",
                "common-focus",
            ]}
        >
            <div
                class:list={[
                    "w-full md:row-span-2",
                    "transition-all",
                    "group-open:scale-95 group-open:mt-1",
                    "row-start-1 row-span-1 col-start-1 col-span-3",
                    "md:w-80 md:col-span-1 md:row-span-3",
                    "md:group-open:w-80 md:group-open:scale-100 md:group-open:mt-0",
                    "lg:group-open:w-96",
                ]}
            >
                <Picture
                    alt={`Screenshot of the project ${project.data.title}`}
                    class={"rounded-lg"}
                    formats={["webp", "avif"]}
                    draggable="false"
                    sizes={`(max-width: ${numToPx(breakpoints.md)}) 100vw, 384px`}
                    layout="full-width"
                    loading="lazy"
                    src={project.data.image}
                />
            </div>
            <div
                class:list={[
                    "transition-spacing",
                    "font-black mt-4",
                    "row-start-2",
                    "group-open:pl-4",
                    "md:group-open:pl-0 md:mt-8",
                    "md:row-start-1 md:col-start-2",
                    "md:group-open:mt-12",
                ]}
            >
                <h3
                    class="transition-fonts text-2xl md:text-3xl font-extrabold md:group-open:text-3xl opacity-75 group-open:opacity-100"
                >
                    {project.data.title}
                </h3>
                <p class="font-light leading-tight opacity-70 md:text-lg group-open:text-md group-open:font-bold">
                    {project.data.subline}
                </p>
            </div>
            <ul
                class:list={[
                    "transition-spacing",
                    "flex flex-wrap gap-2 my-4",
                    "row-start-3  col-start-1 col-span-2",
                    "group-open:px-4",
                    "md:group-open:px-0",
                    "md:row-start-2 md:col-start-2 md:col-span-1",
                ]}
            >
                {
                    project.data.tags.map((tag) => (
                        <li class="hashtag text-xs md:text-sm opacity-50 group-open:opacity-70">{tag}</li>
                    ))
                }
            </ul>
            <div
                class:list={[
                    "flex flex-0 px-4 mt-4",
                    "col-start-3 row-start-2 row-span-2",
                    "md:row-start-1 md:row-span-3",
                    "lg:mx-4",
                ]}
            >
                <IconArrowDown
                    class="opacity-10 w-6 max-w-6 transition-transform -rotate-90 group-open:rotate-0 group-open:opacity-75"
                />
            </div>
        </summary>
        <div class="flex gap-x-0 gap-y-8 px-0 group-open:px-4 md:group-open:px-0 pb-4 lg:gap-x-8 md:py-0 transition-spacing">
            <div class="lg:group-open:min-w-[24rem] items-end hidden lg:flex">
                {
                    project.data.clientLogo && (
                        <img
                            src={project.data.clientLogo}
                            alt={`Logo of the company ${project.data.client}`}
                            class="w-auto h-10 max-h-10"
                            draggable="false"
                            loading="lazy"
                        />
                    )
                }
            </div>
            <div>
                <p class="my-8">{project.body}</p>
                <dl class="grid grid-cols-[auto_1fr] items-start gap-x-8 md:gap-y-2">
                    {
                        listItems.map(({label: term, text, href}) => (
                            <>
                                <dt class="font-extrabold uppercase text-xs col-span-2 md:col-span-1 md:leading-loose">{term}</dt>
                                <dd class="col-span-2 md:col-span-1 md:col-start-2 mb-4 md:mb-0">
                                    {href ? (
                                        <a href={href} class="link" target="_blank" rel="noreferrer noopener nofollow">
                                            {text}
                                        </a>
                                    ) : (
                                        <>
                                            {text.split("\n").map((line) => (
                                                <span class="block">{line}</span>
                                            ))}
                                        </>
                                    )}
                                </dd>
                            </>
                        ))
                    }
                </dl>
            </div>
        </div>
    </details>
</card-project>

<script>
    import {matomoTrackEvent} from "../services/matomo";

    class CardProject extends HTMLElement {
        private projectTitle: string;
        private detailsElement: HTMLDetailsElement | null;

        constructor() {
            super();
            this.projectTitle = this.dataset.projectTitle ?? "undefined";
            this.detailsElement = this.querySelector("details");
        }

        connectedCallback() {
            this.detailsElement?.addEventListener("toggle", this.handleToggle);
        }

        disconnectedCallback() {
            this.detailsElement?.removeEventListener("toggle", this.handleToggle);
        }

        private handleToggle = (event: any) => {
            return event.target.open ? this.handleExpand() : this.handleCollapse();
        };

        private handleExpand = () => {
            matomoTrackEvent({action: "expand", category: "project", name: this.projectTitle});
        };

        private handleCollapse = () => {
            matomoTrackEvent({action: "collapse", category: "project", name: this.projectTitle});
        };
    }

    customElements.define("card-project", CardProject);
</script>
