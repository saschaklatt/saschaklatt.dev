---
import type {CollectionEntry} from "astro:content";
import HeaderCentered from "@/components/header-centered.astro";
import SectionContent from "@/components/section-content.astro";
import {Picture} from "astro:assets";

interface Props {
    headline: string;
    subline?: string;
    testimonials: CollectionEntry<"testimonials">[];
}

const {testimonials, headline, subline} = Astro.props;
const name = "testimonial";
---

<SectionContent class="my-32 md:my-80" classContent="flex flex-col items-center">
    <HeaderCentered headline={headline} subline={subline} class="mb-20 md:mb-32" />

    <div class="testimonials flex flex-col items-center">
        {/* Radio inputs and avatars */}
        <div class="inline-flex flex-wrap gap-4 md:gap-6 items-center justify-center md:mb-10">
            {
                testimonials.map((testimonial, idx) => (
                    <>
                        <input
                            type="radio"
                            name={name}
                            id={testimonial.id}
                            class="sr-only common-focus-label-after"
                            checked={idx === 0}
                        />
                        <label
                            for={testimonial.id}
                            class="testimonial-avatar cursor-pointer no-tap-highlight inline-block rounded-full overflow-hidden transition-all"
                            data-testimonial-id={testimonial.id}
                            data-active={idx === 0 ? "true" : "false"}
                        >
                            <Picture
                                alt={`Profile picture of ${testimonial.data.referrer}`}
                                class="w-10 h-10 md:w-16 md:h-16 select-none"
                                draggable="false"
                                formats={["webp", "avif"]}
                                height="96"
                                loading="lazy"
                                src={testimonial.data.referrerImage}
                                width="96"
                            />
                        </label>
                    </>
                ))
            }
        </div>

        {/* Content container */}
        <div class="relative max-w-prose text-base md:text-2xl bg-[url('/img/bg-heart.svg')] bg-no-repeat bg-center">
            <img
                alt="Decorative quote icon"
                class="absolute hidden md:block md:-top-8 left-0 w-10 h-10 md:w-20 md:h-20 select-none"
                draggable="false"
                height="60"
                loading="lazy"
                src="/img/quote.svg"
                width="60"
            />

            {/* Quote */}
            <div class="pt-4 md:pt-10 pb-4 md:py-20 grid grid-cols-1 grid-rows-1">
                {
                    testimonials.map((testimonial, idx) => (
                        <q
                            class="testimonial-quote relative w-full flex justify-center items-center col-start-1 col-span-1 row-start-1 row-span-1 transition-all duration-300 font-thin text-center pointer-events-none lg:pointer-events-auto"
                            data-testimonial-id={testimonial.id}
                            data-active={idx === 0 ? "true" : "false"}
                        >
                            {testimonial.body}
                        </q>
                    ))
                }
            </div>

            {/* Author */}
            <div class="grid grid-cols-1 grid-rows-1 self-end mb-14 text-right">
                {
                    testimonials.map((testimonial, idx) => (
                        <address
                            class="testimonial-author transition-all duration-300 origin-right col-start-1 col-span-1 row-start-1 row-span-1"
                            data-testimonial-id={testimonial.id}
                            data-active={idx === 0 ? "true" : "false"}
                        >
                            <h3 class="text-sm md:text-xl font-semibold">{`${testimonial.data.referrer}`}</h3>
                            <p class="text-xs md:text-base font-light uppercase opacity-75">{`${testimonial.data.referrerRole}`}</p>
                            <p class="text-xs md:text-base font-light opacity-75">{testimonial.data.referrerCompany}</p>
                        </address>
                    ))
                }
            </div>
        </div>
    </div>
</SectionContent>

<script>
    import {matomoTrackEvent} from "@/services/matomo";

    const radioInputs = document.querySelectorAll('input[name="testimonial"]');

    radioInputs.forEach((radio) => {
        radio.addEventListener("change", (e) => {
            const checkedRadio = e.target as HTMLInputElement;
            const activeTestimonialId = checkedRadio.id;

            // Update all elements with data-testimonial-id
            const allElements = document.querySelectorAll("[data-testimonial-id]");
            allElements.forEach((element) => {
                const testimonialId = element.getAttribute("data-testimonial-id");
                element.setAttribute("data-active", testimonialId === activeTestimonialId ? "true" : "false");
            });

            // Track the testimonial selection
            const testimonialIndex = Array.from(radioInputs).findIndex((input) => input.id === activeTestimonialId);
            matomoTrackEvent({action: "select", category: "testimonial", name: "testimonial", value: testimonialIndex});
        });
    });
</script>
