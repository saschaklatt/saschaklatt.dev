---
import type {CollectionEntry} from "astro:content";
import HeaderCentered from "@/components/header-centered.astro";
import SectionContent from "@/components/section-content.astro";
import Avatar from "./avatar.astro";
import Quote from "./quote.astro";
import Author from "./author.astro";

interface Props {
    headline: string;
    subline?: string;
    testimonials: CollectionEntry<"testimonials">[];
}

const {testimonials, headline, subline} = Astro.props;
const initialIndex = 0;
const name = "testimonial";
---

<SectionContent class="my-32 md:my-80" classContent="flex flex-col items-center">
    <HeaderCentered headline={headline} subline={subline} class="mb-20 md:mb-32" />

    <sk-testimonials name={name} class="flex flex-col items-center">
        {/* Avatars */}
        <div class="inline-flex flex-wrap gap-4 md:gap-6 items-center justify-center md:mb-10">
            {testimonials.map((slide, idx) => <Avatar testimonial={slide} isActive={idx === initialIndex} name={name} />)}
        </div>

        {/* Content */}
        <div class="relative max-w-prose text-base md:text-2xl bg-[url('/img/bg-heart.svg')] bg-no-repeat bg-center">
            <img
                src="/img/quote.svg"
                alt=""
                width="60"
                height="60"
                class="absolute hidden md:block md:-top-8 left-0 w-10 h-10 md:w-20 md:h-20"
            />

            {/* Quote */}
            <div class="pt-4 md:pt-10 pb-4 md:py-20 grid grid-cols-1 grid-rows-1">
                {testimonials.map((slide, idx) => <Quote testimonial={slide} isActive={idx === initialIndex} />)}
            </div>

            {/* Author */}
            <div class="grid grid-cols-1 grid-rows-1 self-end mb-14 text-right">
                {testimonials.map((slide, idx) => <Author testimonial={slide} isActive={idx === initialIndex} />)}
            </div>
        </div>
    </sk-testimonials>
</SectionContent>

<script>
    class Testimonials extends HTMLElement {
        private radioName: string;

        constructor() {
            super();
            this.radioName = this.getAttribute("name") || "testimonial";
        }

        connectedCallback() {
            // Listen for radio changes on all radio inputs with this name
            this.addEventListener("change", this.handleRadioChange);
        }

        disconnectedCallback() {
            this.removeEventListener("change", this.handleRadioChange);
        }

        private handleRadioChange = (evt: Event) => {
            const target = evt.target as HTMLInputElement;
            if (target.type === "radio" && target.name === this.radioName) {
                const checkedRadio = target;
                const testimonialId = checkedRadio.id;

                this.showSlide(testimonialId);
                this.updateAvatars(testimonialId);
            }
        };

        private showSlide(testimonialId: string) {
            // Update quote slides
            const quotes = this.querySelectorAll("q");
            quotes.forEach((quote) => {
                const quoteTestimonialId = quote.getAttribute("data-testimonial-id");
                const isActive = quoteTestimonialId === testimonialId;
                const activeClasses = quote.getAttribute("data-classes-active")?.split(" ") || [];
                const inactiveClasses = quote.getAttribute("data-classes-inactive")?.split(" ") || [];

                if (isActive) {
                    quote.classList.add(...activeClasses);
                    quote.classList.remove(...inactiveClasses);
                } else {
                    quote.classList.add(...inactiveClasses);
                    quote.classList.remove(...activeClasses);
                }
            });

            // Update author slides
            const authors = this.querySelectorAll("address");
            authors.forEach((author) => {
                const authorTestimonialId = author.getAttribute("data-testimonial-id");
                const isActive = authorTestimonialId === testimonialId;
                const activeClasses = author.getAttribute("data-classes-active")?.split(" ") || [];
                const inactiveClasses = author.getAttribute("data-classes-inactive")?.split(" ") || [];

                if (isActive) {
                    author.classList.add(...activeClasses);
                    author.classList.remove(...inactiveClasses);
                } else {
                    author.classList.add(...inactiveClasses);
                    author.classList.remove(...activeClasses);
                }
            });
        }

        private updateAvatars(testimonialId: string) {
            // Find all avatar containers (divs with data-testimonial-id)
            const avatarContainers = this.querySelectorAll("div[data-testimonial-id]");
            avatarContainers.forEach((container) => {
                const containerTestimonialId = container.getAttribute("data-testimonial-id");
                const isActive = containerTestimonialId === testimonialId;
                const activeClasses = container.getAttribute("data-classes-active")?.split(" ") || [];
                const inactiveClasses = container.getAttribute("data-classes-inactive")?.split(" ") || [];

                if (isActive) {
                    container.classList.add(...activeClasses);
                    container.classList.remove(...inactiveClasses);
                } else {
                    container.classList.add(...inactiveClasses);
                    container.classList.remove(...activeClasses);
                }

                // Update the radio input checked state
                const radioInput = container.querySelector('input[type="radio"]') as HTMLInputElement;
                if (radioInput) {
                    radioInput.checked = isActive;
                }

                // Update the label classes
                const label = container.querySelector("label");
                if (label) {
                    const labelActiveClasses = label.getAttribute("data-classes-active")?.split(" ") || [];
                    const labelInactiveClasses = label.getAttribute("data-classes-inactive")?.split(" ") || [];

                    if (isActive) {
                        label.classList.add(...labelActiveClasses);
                        label.classList.remove(...labelInactiveClasses);
                    } else {
                        label.classList.add(...labelInactiveClasses);
                        label.classList.remove(...labelActiveClasses);
                    }
                }
            });
        }
    }

    customElements.define("sk-testimonials", Testimonials);
</script>
